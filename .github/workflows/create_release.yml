name: Create Release

on: 
  release:
    types: [ published ]

env:
  ZIP_FILENAME: "foundry_chn"
  PACKAGE_CONTENT: "module.json cn.json"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/${{env.ZIP_FILENAME}}.zip
          changelog: https://github.com/${{github.repository}}/releases/tag/${{github.event.release.tag_name}}

      # Unflatten JSON files
      - name: Unflatten JSON
        shell: pwsh
        run: |
          $json = Get-Content "cn.json" | ConvertFrom-Json -AsHashtable
          $result = @{}
          $json.GetEnumerator() | ForEach-Object {
              $parts = $_.Key -split '\.'
              $current = $result
              for ($i = 0; $i -lt $parts.Length - 1; $i++) {
                  if (-not $current[$parts[$i]]) { $current[$parts[$i]] = @{} }
                  $current = $current[$parts[$i]]
              }
              $current[$parts[-1]] = $_.Value
          }
          $result | ConvertTo-Json -Depth 100 -Compress | Set-Content "cn.json"

      # Create a zip file with all files required by the module to add to the release
      - name: Create Artifact
        id: build-zip
        run: zip -r $ZIP_FILENAME.zip $PACKAGE_CONTENT

      # Create a release for this specific version
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: ${{ github.event.release.name }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json, ./${{env.ZIP_FILENAME}}.zip'
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}

      - name: Publish to Foundry VTT Repo
        id: publish_foundry_repo
        run: npx @ghost-fvtt/foundry-publish
        env:
          FVTT_MANIFEST_PATH: 'module.json'
          FVTT_TOKEN: ${{ secrets.FVTT_TOKEN }}
